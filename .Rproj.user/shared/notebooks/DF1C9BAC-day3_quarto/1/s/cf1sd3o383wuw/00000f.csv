"0","#| echo: false"
"0","#| warning: false"
"0","#| message: false"
"0",""
"0","# load pacakges"
"0",""
"0","library(tidyverse)  # for additional packages for tidy operations"
"0","library(here)       # for organising file paths"
"0","library(rio)        # for importing data"
"0","library(gt)"
"0",""
"0","# load data"
"0",""
"0",""
"0","## Create path to the file to read"
"0",""
"0","filepath <- here(""data"", ""ahs-cab2014-chhattisgarh-bastar(1).csv"")"
"0",""
"0","## Import data using the `import` function, set class as `tibble`"
"0","df <- import(filepath, setclass = ""tibble"")"
"0",""
"0","# clean variable names"
"0","df <-"
"0","  df |>"
"0","  janitor::clean_names()"
"0",""
"0","# create age in years"
"0","df <-                 # Step 6: reassign it back to `df` to save"
"0"," df |>                # Step 1: specify dataset"
"0","  mutate(age_in_years =           # Step 2: specify the name of the new column"
"0","           case_when(             # Step 3: use the `ifelse` function"
"0","             age_code == ""Days"" ~ age/365,     # Step 4a: change age in days"
"0","             age_code == ""Months"" ~ age/12,    # Step 4b: change age in months"
"0","             age_code == ""Year"" ~ age,         # Step 4c: keep age if age_code is  years"
"0","             TRUE ~ NA                # Step 5: for the rest, keep as NA"
"0","             ))"
"0",""
"0",""
"0","df <-                    # Step 6: reassign it back to `df` to save"
"0","  df |>                  # Step 1: specify dataset"
"0","  mutate(age_cat =           # Step 2: specify the name of the new column"
"0","           case_when(        # Step 3: use the `ifelse` function"
"0","             age_in_years <= 5 ~ ""Under 5 years"",        # Step 4a: specify under 5 years"
"0","             age_in_years < 18 ~ ""Under 18 years"",       # Step 4b: 5-18 years"
"0","             age_in_years >= 18 ~ ""18 years and above"",  # Step 4c: 18+ years"
"0","             TRUE ~ NA                        # Step 5: for the rest, keep as NA"
"0","           )"
"0","  )"
"0","# create systolic and diastolic means"
"0","df <- "
"0","  df |>"
"0","  mutate("
"0","    bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP"
"0","    bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP"
"0","  )"
"0",""
"0","# Create hypertension category"
"0","df <-         #  Step 7: reassign it back to `df` to ensure the changes are saved"
"0","  df |>       # Step 1: specify dataset"
"0","  mutate( hypertension =       # Step 2: specify the name of the new column"
"0","            if_else(            # Step 3: use the `ifelse` function"
"0","              bp_systolic_mean >= 140 | bp_diastolic_mean >= 90,     # Step 4: specify the condition"
"0","              ""Present"",                    #  Step 5: specify if true"
"0","              ""Absent""                      #  Step 6: specify if false"
"0","              )) |>"
"0","  mutate(hypertension = factor(hypertension))"
"0",""
