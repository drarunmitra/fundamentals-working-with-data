df |> dim()
df |>
glimpse()
df <-
df |>
janitor::clean_names()
df |>
names()
df |>
count(sex)
df |>
count(rural_urban)
df |>
select(bp_systolic) |>  # select the variable
class()
df |>
pull(bp_systolic) |>  # select the variable as a vector
class()
df |>
pull(bp_diastolic) |>
summary()
df |>
pull(bp_diastolic_2reading) |>
summary()
df <-                 # Step 6: reassign it back to `df` to save
df |>                # Step 1: specify dataset
mutate(age_in_years =           # Step 2: specify the name of the new column
case_when(             # Step 3: use the `ifelse` function
age_code == "Days" ~ age/365,     # Step 4a: change age in days
age_code == "Months" ~ age/12,    # Step 4b: change age in months
age_code == "Year" ~ age,         # Step 4c: keep age if age_code is  years
TRUE ~ NA                # Step 5: for the rest, keep as NA
))
df <-                    # Step 6: reassign it back to `df` to save
df |>                  # Step 1: specify dataset
mutate(age_cat =           # Step 2: specify the name of the new column
case_when(        # Step 3: use the `ifelse` function
age_in_years <= 5 ~ "Under 5 years",        # Step 4a: specify under 5 years
age_in_years < 18 ~ "Under 18 years",       # Step 4b: 5-18 years
age_in_years >= 18 ~ "18 years and above",  # Step 4c: 18+ years
TRUE ~ NA                        # Step 5: for the rest, keep as NA
)
)
df <-
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
)
df <-         #  Step 7: reassign it back to `df` to ensure the changes are saved
df |>       # Step 1: specify dataset
mutate( hypertension =       # Step 2: specify the name of the new column
if_else(            # Step 3: use the `ifelse` function
bp_systolic_mean >= 140 | bp_diastolic_mean >= 90,     # Step 4: specify the condition
"Present",                    #  Step 5: specify if true
"Absent"                      #  Step 6: specify if false
)) |>
mutate(hypertension = factor(hypertension))
df <-  # Step 7: reassign it back to `df` to save the changes
df |> # Step 1: specify dataset
mutate( hypertension_cat = # Step 2: specify the name of the new column
case_when( # Step 3: use the `case_when` function
bp_systolic_mean >= 140 & bp_diastolic_mean >= 90 ~ "Frank HTN", # Step 4a: condition ~ if true
bp_systolic_mean >= 140 ~ "Isolated Systolic HTN", # Step 4b: condition ~ if true
bp_diastolic_mean >= 90 ~ "Isolated Diastolic HTN", # Step 4c: condition ~ if true
is.na(bp_systolic_mean) ~ NA_character_, # Step 5: how to treat missing values
TRUE ~ "Normotensive"  # Step 6: how to treat the rest
)
)
df <-
df |>
mutate(dm_cat =
if_else(fasting_blood_glucose_mg_dl >= 126,
"Present", "Absent"))
df <- df |>
mutate(anaemia_cat =
if_else(haemoglobin_level <= 10, "Present", "Absent"))
df <- df |>
mutate(bmi = weight_in_kg/(length_height_cm/100)^2
)
df |> export(here("data", "cleaned_data_20231206.rds"))
df |> # Step 1: Specify Dataset
ggplot() + # Step 2: Initiate the plot
geom_histogram( # Step 3: Add Geometry (stars with `geom_`)
aes(x = age_in_years)) + # Step 4: Add Aesthetics (within the `aes()`)
labs(
title = "Age Distribution",
x = "Age in years"  )
df |> # Step 1: Specify Dataset
ggplot() + # Step 2: Initiate the plot
geom_bar(  # Step 3: Add Geometry (stars with `geom_`)
aes(x = rural_urban, # Step 4a: Add Aesthetics (within the `aes()`)
fill = rural_urban)) + # Step 4b: Add Fill color (within the `aes()`)
labs(
title = "Distribution by location",
x = "Location",
caption = "DME 2023 Exercise"
) +
scale_fill_manual(values = c("blue", "red")) # Step 5: Change the fill colors
df |> # Step 1: Specify Dataset
ggplot() + # Step 2: Initiate the plot
geom_bar(  # Step 3: Add Geometry (stars with `geom_`)
aes(x = rural_urban, # Step 4a: Add Aesthetics (within the `aes()`)
fill = rural_urban)) + # Step 4b: Add Fill color (within the `aes()`)
labs(
title = "Distribution by location",
x = "Location",
caption = "DME 2023 Exercise"
) +
ggsci::scale_fill_lancet()
df |> # Step 1: Specify Dataset
ggplot() + # Step 2: Initiate the plot
geom_bar(  # Step 3: Add Geometry (stars with `geom_`)
aes(x = rural_urban, # Step 4a: Add Aesthetics (within the `aes()`)
fill = rural_urban)) + # Step 4b: Add Fill color (within the `aes()`)
labs(
title = "Distribution by location",
x = "Location",
caption = "DME 2023 Exercise"
) +
ggsci::scale_fill_jama()
mean(df$bp_systolic, df$bp_diastolic_2reading)
mean(df$bp_systolic)
mean(df$bp_systolic, na.rm = T)
df %>% rowwise() %>% mutate(new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T))
df %>% rowwise() %>% mutate(new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T)) %>% select(bp_systolic, bp_systolic_2_reading,new_syst) %>%  view()
summarize
summarize
df %>% rowwise() %>% summarize(new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T)) %>% select(bp_systolic, bp_systolic_2_reading,new_syst) %>%  view()
df %>% rowwise() %>% summarize(new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T))
df %>% rowwise() %>% summarize(bp_systolic, bp_systolic_2_reading, new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T)) %>% select(bp_systolic, bp_systolic_2_reading,new_syst) %>%  view()
df %>% rowwise() %>% summarize(bp_systolic, bp_systolic_2_reading, new_syst = mean(bp_systolic, bp_systolic_2_reading, na.rm = T)) %>% select(bp_systolic, bp_systolic_2_reading,new_syst) %>%  view()
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
) %>%  select(bp_systolic_mean, bp_systolic , bp_systolic_2_reading) %>%  view()
286/2
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
) %>%  select( bp_systolic , bp_systolic_2_reading,bp_systolic_mean) %>%  view()
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
) %>%  select( bp_systolic , bp_systolic_2_reading,bp_systolic_mean) %>%  view()
df %>%
ggplot() +
geom_point(aes(x = bp_systolic_mean, y = bp_diastolic_mean))
df %>%
ggplot() +
geom_point(aes(x = bp_systolic_mean, y = bp_diastolic_mean)) +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean)) +
geom_point() +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = sex)) +
geom_point() +
geom_smooth(method = 'lm')
#| echo: false
#| warning: false
#| message: false
# load pacakges
library(tidyverse)  # for additional packages for tidy operations
library(here)       # for organising file paths
library(rio)        # for importing data
# load data
## Create path to the file to read
filepath <- here("data", "ahs-cab2014-chhattisgarh-bastar(1).csv")
## Import data using the `import` function, set class as `tibble`
df <- import(filepath, setclass = "tibble")
# clean variable names
df <-
df |>
janitor::clean_names()
# create age in years
df <-                 # Step 6: reassign it back to `df` to save
df |>                # Step 1: specify dataset
mutate(age_in_years =           # Step 2: specify the name of the new column
case_when(             # Step 3: use the `ifelse` function
age_code == "Days" ~ age/365,     # Step 4a: change age in days
age_code == "Months" ~ age/12,    # Step 4b: change age in months
age_code == "Year" ~ age,         # Step 4c: keep age if age_code is  years
TRUE ~ NA                # Step 5: for the rest, keep as NA
))
df <-                    # Step 6: reassign it back to `df` to save
df |>                  # Step 1: specify dataset
mutate(age_cat =           # Step 2: specify the name of the new column
case_when(        # Step 3: use the `ifelse` function
age_in_years <= 5 ~ "Under 5 years",        # Step 4a: specify under 5 years
age_in_years < 18 ~ "Under 18 years",       # Step 4b: 5-18 years
age_in_years >= 18 ~ "18 years and above",  # Step 4c: 18+ years
TRUE ~ NA                        # Step 5: for the rest, keep as NA
)
)
# create systolic and diastolic means
df <-
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
)
# Create hypertension category
df <-         #  Step 7: reassign it back to `df` to ensure the changes are saved
df |>       # Step 1: specify dataset
mutate( hypertension =       # Step 2: specify the name of the new column
if_else(            # Step 3: use the `ifelse` function
bp_systolic_mean >= 140 | bp_diastolic_mean >= 90,     # Step 4: specify the condition
"Present",                    #  Step 5: specify if true
"Absent"                      #  Step 6: specify if false
)) |>
mutate(hypertension = factor(hypertension))
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = age_cat)) +
geom_point() +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point() +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban), alpha = 0.5) +
geom_point() +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.5) +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.2) +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.05) +
geom_smooth(method = 'lm')
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.05) +
geom_smooth(method = 'lm', alpha= 0.8)
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.05) +
geom_smooth(method = 'lm', alpha= 0.8)
df %>%
filter(age_in_years >= 18) %>%
count(hypertenson)
df %>%
filter(age_in_years >= 18) %>%
count(hypertension)
df %>%
filter(age_in_years >= 18) %>%
count(hypertension) %>%
summarize(hypertension, n, prev = round((n/sum(n))*100,2))
df %>%
filter(age_in_years >= 18) %>%
count(hypertension) %>%
drop_na(hypertension) %>%
summarize(hypertension, n, prev = round((n/sum(n))*100,2))
df %>%
filter(age_in_years >= 18) %>%
count(hypertension) %>%
drop_na(hypertension) %>%
summarize(hypertension, n, prev = round((n/sum(n))*100,2)) %>%
gt::gt()
?add_p
#| echo: false
#| warning: false
#| message: false
# load pacakges
library(tidyverse)  # for additional packages for tidy operations
library(here)       # for organising file paths
library(rio)        # for importing data
library(gt)
# load data
## Create path to the file to read
filepath <- here("data", "ahs-cab2014-chhattisgarh-bastar(1).csv")
## Import data using the `import` function, set class as `tibble`
df <- import(filepath, setclass = "tibble")
# clean variable names
df <-
df |>
janitor::clean_names()
# create age in years
df <-                 # Step 6: reassign it back to `df` to save
df |>                # Step 1: specify dataset
mutate(age_in_years =           # Step 2: specify the name of the new column
case_when(             # Step 3: use the `ifelse` function
age_code == "Days" ~ age/365,     # Step 4a: change age in days
age_code == "Months" ~ age/12,    # Step 4b: change age in months
age_code == "Year" ~ age,         # Step 4c: keep age if age_code is  years
TRUE ~ NA                # Step 5: for the rest, keep as NA
))
df <-                    # Step 6: reassign it back to `df` to save
df |>                  # Step 1: specify dataset
mutate(age_cat =           # Step 2: specify the name of the new column
case_when(        # Step 3: use the `ifelse` function
age_in_years <= 5 ~ "Under 5 years",        # Step 4a: specify under 5 years
age_in_years < 18 ~ "Under 18 years",       # Step 4b: 5-18 years
age_in_years >= 18 ~ "18 years and above",  # Step 4c: 18+ years
TRUE ~ NA                        # Step 5: for the rest, keep as NA
)
)
# create systolic and diastolic means
df <-
df |>
mutate(
bp_systolic_mean = (bp_systolic + bp_systolic_2_reading)/2 , # Step 2: calculate mean systolic BP
bp_diastolic_mean = (bp_diastolic + bp_diastolic_2reading)/2 # Step 3: calculate mean diastolic BP
)
# Create hypertension category
df <-         #  Step 7: reassign it back to `df` to ensure the changes are saved
df |>       # Step 1: specify dataset
mutate( hypertension =       # Step 2: specify the name of the new column
if_else(            # Step 3: use the `ifelse` function
bp_systolic_mean >= 140 | bp_diastolic_mean >= 90,     # Step 4: specify the condition
"Present",                    #  Step 5: specify if true
"Absent"                      #  Step 6: specify if false
)) |>
mutate(hypertension = factor(hypertension))
#| echo: false
#| warning: false
#| message: false
df %>%
ggplot(aes(x = bp_systolic_mean, y = bp_diastolic_mean, color = rural_urban)) +
geom_point(alpha = 0.05) +
geom_smooth(method = 'lm', alpha= 0.8)
#| echo: false
df %>%
filter(age_in_years >= 18) %>%
count(hypertension) %>%
drop_na(hypertension) %>%
reframe(hypertension, n, prev = round((n/sum(n))*100,2)) %>%
gt::gt() %>%
tab_header(
title = "The prevalance of Hypertension among Adult Poulation",
subtitle = "The data from CAB Survey 2014 (https://data.gov.in/search?title=cab%20survey)"
)
df <- df |>
mutate(anaemia_cat =
if_else(haemoglobin_level <= 10, "Present", "Absent"))
df %>%
filter(age_in_years < 18) %>%
filter(sex == "Female") %>%
gtsummary::tbl_summary(anaemia_cat)
df %>%
filter(age_in_years < 18) %>%
filter(sex == "Female") %>%
select(anaemia_cat) %>%
gtsummary::tbl_summary()
df %>%
filter(age_in_years < 18) %>%
filter(sex == "Female") %>%
select(anaemia_cat) %>%
gtsummary::tbl_summary(missing  = 'no')
df %>%
filter(age_in_years < 18) %>%
# filter(sex == "Female") %>%
select(anaemia_cat, sex) %>%
gtsummary::tbl_summary(by = sex, missing  = 'no')
df %>%
filter(age_in_years < 18) %>%
# filter(sex == "Female") %>%
select(anaemia_cat, sex) %>%
gtsummary::tbl_summary(by = sex, missing  = 'no') %>%
add_p()
library(gtsummary)
df %>%
filter(age_in_years < 18) %>%
# filter(sex == "Female") %>%
select(anaemia_cat, sex) %>%
gtsummary::tbl_summary(by = sex, missing  = 'no') %>%
add_p()
df %>%
summarize(mean_BMI = mean(bmi, na.rm = T))
df <- df |>
mutate(bmi = weight_in_kg/(length_height_cm/100)^2
)
df %>%
summarize(mean_BMI = mean(bmi, na.rm = T))
df %>%
select(bmi) %>%
tbl_summary(
statistic = list(all_continuous() ~ "{mean}, ({sd})")
)
df %>%
summarize(mean_BMI = mean(bmi, na.rm = T))
df %>%
select(bmi, sex) %>%
tbl_summary(
by = sex,
statistic = list(all_continuous() ~ "{mean}, ({sd})")
)
df %>%
select(bmi, sex) %>%
tbl_summary(
by = sex,
statistic = list(all_continuous() ~ "{mean}, ({sd})"),
missing = 'no'
)
df %>%
select(bmi, sex) %>%
tbl_summary(
by = sex,
statistic = list(all_continuous() ~ "{mean}, ({sd})"),
missing = 'no'
) %>%
add_p()
df %>%
ggplot() +
geom_boxplot(aes(x = bmi, fill = sex))
df %>%
ggplot() +
geom_boxplot(aes(y = bmi, fill = sex))
df %>%
ggplot() +
geom_histogram(aes(x = bmi, fill = sex))
df %>%
ggplot() +
geom_histogram(aes(x = bmi, fill = sex), alpha = 0.5)
df <- df %>%
mutate(bmi = ifelse(bmi >= 40, 40, bmi))
df %>%
ggplot() +
geom_boxplot(aes(y = bmi, fill = sex))
#| eval: true
#| echo: false
#| warning: false
#| message: false
#| include: false
#load libraries
library(tidyverse)
library(tidymodels)
library(infer)
#| include: false
#| eval: true
library(tidyverse)
df <- MASS::birthwt |> tibble()
df <- df %>%
mutate(smoke = factor(smoke,
levels = c(0,1),
labels = c("Non Smoker",
"Smoker"))) %>%
mutate(race = factor(race,
levels = c(1,2,3),
labels = c("White",
"Black",
"Other"))) %>%
mutate(low = factor(low,
levels =  c(0,1),
labels = c("Normal",
"Low Birth Weight")))
df %>%
infer::specify(response = bwt) %>%
infer::calculate(stat = "mean")
observed_statistic |> pull()
observed_statistic <- df %>%
infer::specify(response = bwt) %>%
infer::calculate(stat = "mean")
observed_statistic |> pull()
null_dist_1_sample <- df %>%
specify(response = bwt) %>%
hypothesize(null = "point", # Point for single variable
mu = 2800) %>%
generate(reps = 9999,
type = "bootstrap") %>%
calculate(stat = "mean")
null_dist_1_sample
null_dist_1_sample |>
ggplot() +
geom_histogram(aes(x = stat), alpha = 0.5)
null_dist_1_sample |>
ggplot() +
geom_histogram(aes(x = stat), alpha = 0.5) +
geom_vline(xintercept = (observed_statistic |> pull()))
null_dist_1_sample <- df %>%
specify(response = bwt) %>%
hypothesize(null = "point", # Point for single variable
mu = 2750) %>%
generate(reps = 9999,
type = "bootstrap") %>%
calculate(stat = "mean")
null_dist_1_sample |>
ggplot() +
geom_histogram(aes(x = stat), alpha = 0.5) +
geom_vline(xintercept = (observed_statistic |> pull()))
null_dist_1_sample <- df %>%
specify(response = bwt) %>%
hypothesize(null = "point", # Point for single variable
mu = 3000) %>%
generate(reps = 9999,
type = "bootstrap") %>%
calculate(stat = "mean")
null_dist_1_sample |>
ggplot() +
geom_histogram(aes(x = stat), alpha = 0.5) +
geom_vline(xintercept = (observed_statistic |> pull()))
null_dist_1_sample <- df %>%
specify(response = bwt) %>%
hypothesize(null = "point", # Point for single variable
mu = 2750) %>%
generate(reps = 9999,
type = "bootstrap") %>%
calculate(stat = "mean")
null_dist_1_sample |>
ggplot() +
geom_histogram(aes(x = stat), alpha = 0.5) +
geom_vline(xintercept = (observed_statistic |> pull()))
